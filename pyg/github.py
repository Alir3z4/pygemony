import github3
from os import path


class GithubAPIManager:
    # repo_location = grappigpanda/pygemony.py
    def __init__(self, user, token, owner, repo):
        self.is_authed = False

        # Auth stuff
        self.user = user
        self.token = token
        self.gh = self.login()
        if self.gh is None:
            raise "Failed to login"

        # Remote repo stuff
        self.owner = owner
        self.repo = repo
        self.curr_repo = self.gh.repository(owner, repo)

    def login(self):
        try:
            return github3.login(self.user, self.token)
        except github3.models.GitHubError as e:
            print "Failed to login due to {}".format(e)
        return None

    def _save_submitted_todo(self, issue):
        print issue
        if not path.isfile('./.pyg-submitted'):
            with open('./.pyg-submitted', 'a+') as f:
                f.write("""
                This file was auto-generated by pygemony to help users keep-track of long-forgotten TODOs.
                For more information, please visit: https://github.com/GrappigPanda/pygemony
                """)
                f.write(issue[3])
                f.write('\n')
            return True

        if issue[3] in open('./.pyg-submitted').read():
            return False
        else:
            with open('./.pyg-submitted', 'ab') as f:
                f.write(issue[3])
                f.write('\n')
            return True

    def commit(self, todo_found):
        # TODO(ian): Assign issues if () in line. (ian), for example
        for issue in todo_found:
            if self._save_submitted_todo(issue):
                self.curr_repo.create_issue(title=issue[2],
                                        body=self._construct_issue_body(issue))

    # TODO(ian): Convert _construct* to @staticmethod where applicable?
    @staticmethod
    def _construct_issue_body(issue):
        sz = 'File Location: {}<br>Line Number: {}'.format(issue[0], issue[1])
        sz += '<br> This message was auto-generated by Pygemony:'
        sz += '<a href="http://github.com/GrappigPanda/pygemony.py">Github</a>'
        return sz

    def get_languages(self):
        for i in self.curr_repo.iter_languages():
            yield i
